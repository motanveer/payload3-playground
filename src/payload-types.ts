/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    media: Media;
    wizards: Wizard;
    Houses: House;
    Spells: Spell;
    wands: Wand;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    wizards: {
      Wands: 'wands';
    };
    Houses: {
      Members: 'wizards';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    wizards: WizardsSelect<false> | WizardsSelect<true>;
    Houses: HousesSelect<false> | HousesSelect<true>;
    Spells: SpellsSelect<false> | SpellsSelect<true>;
    wands: WandsSelect<false> | WandsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wizards".
 */
export interface Wizard {
  id: number;
  name?: string | null;
  Photo?: (number | null) | Media;
  Info?: {
    House?: (number | null) | House;
    Bio?: string | null;
  };
  Wands?: {
    docs?: (number | Wand)[] | null;
    hasNextPage?: boolean | null;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Houses".
 */
export interface House {
  id: number;
  name: string;
  slug?: string | null;
  slugLock?: boolean | null;
  meta?: {};
  attributes?: {
    Animal?: string | null;
    Motto?: string | null;
    Traits?: string | null;
    Colors?: string | null;
    Founder?: string | null;
  };
  embelem?: (number | null) | Media;
  Description?: string | null;
  notableMembers?:
    | {
        Wizard?: (number | null) | Wizard;
        id?: string | null;
      }[]
    | null;
  Members?: {
    docs?: (number | Wizard)[] | null;
    hasNextPage?: boolean | null;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wands".
 */
export interface Wand {
  id: number;
  name?: string | null;
  owner?: (number | null) | Wizard;
  'Wood Type'?: ('Holly' | 'Yew' | 'Ash' | 'Vine' | 'Elder' | 'Walnut' | 'Maple' | 'Cherry' | 'Willow') | null;
  'Core Type'?:
    | ('Phoenix Feather' | 'Dragon Heartstring' | 'Unicorn Hair' | 'Thestral Tail Hair' | 'Basilisk Fang')
    | null;
  description?: string | null;
  attributes?: {
    length?: number | null;
    flexibility?: ('Unyielding' | 'Slightly Springy' | 'Supple' | 'Hard' | 'Flexible' | 'Brittle') | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Spells".
 */
export interface Spell {
  id: number;
  name?: string | null;
  Icon?: (number | null) | Media;
  'Spell Type'?: ('Charm' | 'Hex' | 'Jinx' | 'Curse' | 'Spell' | 'Transfiguration' | 'Enchantment') | null;
  Description?: string | null;
  category?:
    | ('Utility' | 'Combat' | 'Defensive' | 'Healing' | 'Offensive' | 'Fun/Entertainment' | 'Forbidden/Dark Magic')
    | null;
  difficulty?: ('Beginner' | 'Intermediate' | 'Advanced' | 'Master-Level') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'wizards';
        value: number | Wizard;
      } | null)
    | ({
        relationTo: 'Houses';
        value: number | House;
      } | null)
    | ({
        relationTo: 'Spells';
        value: number | Spell;
      } | null)
    | ({
        relationTo: 'wands';
        value: number | Wand;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wizards_select".
 */
export interface WizardsSelect<T extends boolean = true> {
  name?: T;
  Photo?: T;
  Info?:
    | T
    | {
        House?: T;
        Bio?: T;
      };
  Wands?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Houses_select".
 */
export interface HousesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  slugLock?: T;
  meta?: T | {};
  attributes?:
    | T
    | {
        Animal?: T;
        Motto?: T;
        Traits?: T;
        Colors?: T;
        Founder?: T;
      };
  embelem?: T;
  Description?: T;
  notableMembers?:
    | T
    | {
        Wizard?: T;
        id?: T;
      };
  Members?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Spells_select".
 */
export interface SpellsSelect<T extends boolean = true> {
  name?: T;
  Icon?: T;
  'Spell Type'?: T;
  Description?: T;
  category?: T;
  difficulty?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wands_select".
 */
export interface WandsSelect<T extends boolean = true> {
  name?: T;
  owner?: T;
  'Wood Type'?: T;
  'Core Type'?: T;
  description?: T;
  attributes?:
    | T
    | {
        length?: T;
        flexibility?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}